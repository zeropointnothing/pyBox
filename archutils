#!/usr/bin/env python
import argparse
import os
import subprocess
import sys
import re
import atexit
from time import sleep
from colorama import Fore, Style

parser = argparse.ArgumentParser()
parser.add_argument("-S", "--service", help="Disable or enable a service: 0/1 [MODE: Start/Stop instead.]", choices=['0', '1'])
parser.add_argument("-SR", "--sddm", help="Stop the SDDM service and restart into tty1 mode.", action="store_true")
parser.add_argument("-m", "--mode", help="For commands that support it, switch to an alternate mode.", action="store_true")
args = parser.parse_args()

class Logger:
    def __init__(self, name: str | None = None) -> None:
        if name:
            self.name = name
        else:
            self.name = os.path.basename(__file__)

    def regis_exit_handler(self, custom_message: str | None = None):
        """
        Register the exit handler that will reset coloring from the Logger. This will ensure that the user wont have a colored terminal after archutils stops. 
        """
        
        message = f"{self.name}:EXIT:{custom_message}" if custom_message else ""

        atexit.register(lambda: print(Style.RESET_ALL + message))

        # print(Style.RESET_ALL)
        # if custom_message:
        #     print(custom_message)

    def info(self, text: str) -> None:
        print(Fore.LIGHTWHITE_EX + f"{self.name}: " + text + Fore.RESET)
    
    def warn(self, text: str) -> None:
        print(Fore.YELLOW + f"{self.name}:WARNING: " + text + Fore.RESET)

    def error(self, text: str) -> None:
        print(Fore.RED + f"{self.name}:ERROR: " + text + Fore.RESET)


log = Logger()
log.regis_exit_handler()

if args.service:
    try:
        args.service = int(args.service)
        type = ['disable', 'enable'][args.service]
    except ValueError:
        parser.error(f"Unexpected argument {args.service}.")

    val = input(f"Service to {type}:\n> ")

    if val == "bluetooth":
        if args.service == 1:
            print("Starting Bluetooth. You may be asked for your password.")
            os.system("sudo systemctl start bluetooth")
            print("Started Bluetooth.")
        elif args.service == 0:
            print("Stopping Bluetooth. You may be asked for your password.")
            os.system("sudo systemctl stop bluetooth")
            print("Stopped Bluetooth.")
        else:
            parser.error("Unexpected argument.")

    elif val == "custom":
        if args.mode:
            type = ['stop', 'start'][args.service]

        log.info(f"archutils will attempt to {type} this process. NOTE: You should check that this process exists, and isn't already {type}d! (systemctl status SERVICE)")
        try:
            svs = input("> ")
        except KeyboardInterrupt:
            print()
            sys.exit(0)

        log.info(f"Now attempting to {type} {svs}... You may be asked for your password.")
        
        output = subprocess.run(f"systemctl {type} {svs}", shell=True, capture_output=True, check=False).stderr.decode().strip("\n")
        
        if re.search("Failed to", output):
            log.error(f"Failed to modify {svs}'s status. systemctl responded with: {output}")
        else:
            log.info(f"Modified {svs}'s status successfully.")
elif args.sddm:
    log.warn("This will disable SDDM's auto start feature for your DE! In order to leave the terminal and return to your DE, you will have to renable sddm.service"\
             " using \"systemctl enable sddm\".")

    usr = input('Shutdown or restart? [S/r]\n> ')

    if usr.lower() == "s":
        print()
        log.info("Shutting down and disabling SDDM.")
    elif usr.lower() == "r":
        print()
        log.info("Restarting and disabling SDDM.")
    else:
        raise ValueError("Invalid response.")

    output = subprocess.run("systemctl disable sddm", shell=True, capture_output=True, check=False).stderr.decode().strip("\n")
    if re.search("Failed to stop", output):
        log.error(f"Failed to stop SDDM. systemctl responded with: {output}")
        print()
        log.info("Aborting.")
    else:
        log.info("Successfully shut SDDM down. Goodbye!")
        sleep(2)

        if usr.lower() == "s":
            os.system("sudo shutdown now")
        elif usr.lower() == "r":
            os.system("sudo reboot")